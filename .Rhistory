library(dplyr)
library(stringr)
library(ggspatial)
library(leaflet)
library(htmlwidgets)
library(webshot2)
library(rmapshaper) # simplify shapefiles
getwd()
##upload habitat shapefiles by habitat zone and ecoregion
habitat_dir<-"C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat"
# List all habitat type folders (directories) in the current directory
habitattype_folders <- list.dirs(path = habitat_dir, full.names = TRUE, recursive = FALSE)
print(habitattype_folders)
# Define base output directory for saving all files
output_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/Maps_Output"
# Define directory for shapefiles inside the output directory
shp_dir <- file.path(output_dir, "Shapefiles")
# Create the shapefiles directory if it doesn't exist
dir.create(shp_dir, showWarnings = FALSE)
# Optional: Also create an "HTML_Maps" directory for the map HTML/PNG files
maps_dir <- file.path(output_dir, "HTML_Maps")
dir.create(maps_dir, showWarnings = FALSE)
# Print paths to check if directories are created correctly
print(paste("Shapefiles will be saved to:", shp_dir))
print(paste("Maps (HTML/PNG) will be saved to:", maps_dir))
# List all .gpkg files in the directory
gpkg_files <- list.files(gpkg_dir, pattern = "\\.gpkg$", full.names = TRUE)
# Create output directory for GPKG files
gpkg_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat/Converted_GPKG"
# List all .gpkg files in the directory
gpkg_files <- list.files(gpkg_dir, pattern = "\\.gpkg$", full.names = TRUE)
View(gpkg_files)
# Initialize an empty list to store the shapefiles from the .gpkg files
shapefile_list <- list()
# View the list of shapefiles with corrected names
View(shapefile_list)
# Create a summary table of key info
shapefile_summary <- lapply(names(shapefile_list), function(name) {
shp <- shapefile_list[[name]]
gpkg_path <- file.path(gpkg_dir, paste0(name, ".gpkg"))
list(
name = name,
crs = st_crs(shp)$epsg,
features = nrow(shp),
file_size_mb = if (file.exists(gpkg_path)) file.info(gpkg_path)$size / 1024^2 else NA,
geometry_type = unique(st_geometry_type(shp))
)
}) %>% bind_rows()
# View in Viewer pane
View(shapefile_summary)
# Loop through the .gpkg files and read the layers
for (file in gpkg_files) {
# Get the available layers in the .gpkg file
layers <- st_layers(file)$name
# Loop through each layer and read it into the shapefile list
for (layer in layers) {
# Correct the naming convention to match "habitattype_habitatzone_ecoregion"
# Extract the correct file name (i.e., the first part of the layer name)
# assuming the layer name is not in the format you expect.
# For example, layer_name could be "wca_off_er1" or something else.
# Use only the part of the layer name that corresponds to your naming convention
layer_name_parts <- strsplit(layer, "_")[[1]]
correct_name <- paste(tolower(layer_name_parts[1]),
tolower(layer_name_parts[2]),
toupper(layer_name_parts[3]),
sep = "_")
# Store the shapefile in the list with the corrected name
shapefile_list[[correct_name]] <- st_read(file, layer = layer, quiet = TRUE)
}
}
# View the list of shapefiles with corrected names
View(shapefile_list)
gpkg_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat/Converted_GPKG"
# Create a summary table of key info
shapefile_summary <- lapply(names(shapefile_list), function(name) {
shp <- shapefile_list[[name]]
gpkg_path <- file.path(gpkg_dir, paste0(name, ".gpkg"))
list(
name = name,
crs = st_crs(shp)$epsg,
features = nrow(shp),
file_size_mb = if (file.exists(gpkg_path)) file.info(gpkg_path)$size / 1024^2 else NA,
geometry_type = unique(st_geometry_type(shp))
)
}) %>% bind_rows()
# View in Viewer pane
View(shapefile_summary)
########################## manual reprojection of .gpkg ################################
# Reload shapefiles to be sure we're using fresh copies
gpkg_files <- list.files(gpkg_dir, pattern = "\\.gpkg$", full.names = TRUE)
View(gpkg_files)
# Loop through the .gpkg files and read the layers
for (file in gpkg_files) {
# Get the available layers in the .gpkg file
layers <- st_layers(file)$name
# Loop through each layer and read it into the shapefile list
for (layer in layers) {
# Correct the naming convention to match "habitattype_habitatzone_ecoregion"
layer_name_parts <- strsplit(layer, "_")[[1]]
correct_name <- paste(tolower(layer_name_parts[1]),
tolower(layer_name_parts[2]),
toupper(layer_name_parts[3]),
sep = "_")
# Read the shapefile into R
shp <- st_read(file, layer = layer, quiet = TRUE)
# Convert POLYGON geometries to MULTIPOLYGON if needed
if (any(st_geometry_type(shp) == "POLYGON")) {
shp <- st_cast(shp, "MULTIPOLYGON")
}
# Add the shapefile to the list with the corrected name
shapefile_list[[correct_name]] <- shp
}
}
# View the list of shapefiles with corrected names
View(shapefile_list)
# Initialize an empty list to store the shapefiles from the .gpkg files
shapefile_list <- list()
# Loop through the .gpkg files and read the layers
for (file in gpkg_files) {
# Print debug message to see the files being processed
message(paste("Processing file:", file))
# Get the available layers in the .gpkg file
layers <- st_layers(file)$name
if (length(layers) == 0) {
message(paste("No layers found in file:", file))
next
}
# Loop through each layer and read it into the shapefile list
for (layer in layers) {
# Correct the naming convention to match "habitattype_habitatzone_ecoregion"
layer_name_parts <- strsplit(layer, "_")[[1]]
correct_name <- paste(tolower(layer_name_parts[1]),
tolower(layer_name_parts[2]),
toupper(layer_name_parts[3]),
sep = "_")
# Read the shapefile into R
shp <- try(st_read(file, layer = layer, quiet = TRUE), silent = TRUE)
# Check if there was an error reading the shapefile
if (inherits(shp, "try-error")) {
message(paste("Error reading layer:", layer, "from file:", file))
next
}
# Check geometry type and convert POLYGON to MULTIPOLYGON if needed
if (any(st_geometry_type(shp) == "POLYGON")) {
shp <- st_cast(shp, "MULTIPOLYGON")
}
# Store the shapefile in the list
shapefile_list[[correct_name]] <- shp
}
}
# Check the result after processing
if (length(shapefile_list) == 0) {
message("No shapefiles were successfully read or processed.")
} else {
# View the list of shapefiles with corrected names
View(shapefile_list)
}
# Create a summary table of key info
shapefile_summary <- lapply(names(shapefile_list), function(name) {
shp <- shapefile_list[[name]]
gpkg_path <- file.path(gpkg_dir, paste0(name, ".gpkg"))
list(
name = name,
crs = st_crs(shp)$epsg,
features = nrow(shp),
file_size_mb = if (file.exists(gpkg_path)) file.info(gpkg_path)$size / 1024^2 else NA,
geometry_type = unique(st_geometry_type(shp))
)
}) %>% bind_rows()
# View the summary in the Viewer pane
View(shapefile_summary)
library(leaflet)
# Extract the layers
wca_layer <- shapefile_list[["wca_off_er1"]]
mangrove_layer <- shapefile_list[["mangrove_est_er2"]]
# Basic leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = wca_layer,
fillColor = "red",
fillOpacity = 0.5,
color = "red",
weight = 1,
group = "WCA OFF ER1",
label = ~paste("WCA")) %>%
addPolygons(data = mangrove_layer,
fillColor = "green",
fillOpacity = 0.5,
color = "green",
weight = 1,
group = "Mangrove EST ER2",
label = ~paste("Mangrove")) %>%
addLayersControl(
overlayGroups = c("WCA OFF ER1", "Mangrove EST ER2"),
options = layersControlOptions(collapsed = FALSE)
)
########################## manual reprojection of .gpkg ################################
# Reload shapefiles to be sure we're using fresh copies
gpkg_files <- list.files(gpkg_dir, pattern = "\\.gpkg$", full.names = TRUE)
View(gpkg_files)
# Define empty list to hold cleaned layers
cleaned_list <- list()
# Loop through each file and fix as needed
for (file in gpkg_files) {
layers <- st_layers(file)$name
for (layer in layers) {
name <- tolower(layer)
message("Processing: ", name)
shp <- st_read(file, layer = layer, quiet = TRUE)
# Fix CRS if needed
if (is.na(st_crs(shp)) || st_crs(shp)$epsg != 4326) {
message("  -> Reprojecting to EPSG:4326")
shp <- st_transform(shp, crs = 4326)
}
# Save cleaned version back to disk
cleaned_path <- file.path(gpkg_dir, paste0(name, ".gpkg"))
st_write(shp, cleaned_path, delete_dsn = TRUE, quiet = TRUE) ###saave clean files in "converted gpkg" folder and delete old
# Optionally store in memory
cleaned_list[[name]] <- shp
}
}
####################### Gag dataset #############################
Gag<- read.csv("C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/Gag_EX_data_Rcode.csv")
View(Gag)
##separate values that are followed by commas into separate row
Gag_long <-Gag %>%
separate_rows(HabitatZone, sep = ",\\s*") %>%
separate_rows(HabitatType, sep = ",\\s*") %>%
separate_rows(Ecoregion, sep = ",\\s*")
View(Gag_long)
Gag_long$HabitatType[Gag_long$HabitatType == "man"] <- "mangrove"
View(Gag_long)
##overlaying shapefiles based on Gag_long
##clean up, make all lowercase and remove any additional spaces
Gag_clean <- Gag_long %>%
mutate(
HabitatType = str_trim(str_to_lower(HabitatType)), #EM, HB,mangrove, oyster, reef, sand, SAV, shelf, SB, WCA
HabitatZone = str_trim(str_to_lower(HabitatZone)), #est, near, off
Species = str_trim(str_to_lower(Species)),
Lifestage = str_trim(str_to_lower(Lifestage)),
Ecoregion = paste0 ("er", Ecoregion), # ER1, ER2, ER3, ER4, ER5
shapefile_name = paste(HabitatType, HabitatZone, Ecoregion, sep ="_"))
View(Gag_clean)
# Filter only early juvenile from the cleaned data
early_juv_group <- Gag_clean %>%
filter(Lifestage == "earlyjuvenile") %>%
group_by(Species, Lifestage) %>%
group_split() %>%
.[[1]]  # Pull the data frame out of the list
# Basic info
species <- unique(early_juv_group$Species)
lifestage <- unique(early_juv_group$Lifestage)
# Titles and filenames
title_text <- paste(str_to_title(species), "-", str_to_title(lifestage), "EFH")
safe_id <- gsub("[^[:alnum:]_]", "_", paste(species, lifestage, sep = "_"))
html_file <- file.path(output_dir, paste0("map_", safe_id, ".html"))
png_file <- file.path(output_dir, paste0("map_", safe_id, ".png"))
shp_file <- file.path(shp_dir, paste0("EFH_", safe_id, ".shp"))
# Grab shapefile names
shapes <- unique(early_juv_group$shapefile_name)
shape_list <- list()
# Start leaflet map
efh_map <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
setView(lng = -89, lat = 25, zoom = 5) %>%
addLabelOnlyMarkers(
lng = -98, lat = 31,
label = title_text,
labelOptions = labelOptions(noHide = TRUE, direction = "center", textsize = "20px", fontWeight = "bold", opacity = 1)
)
# Loop through shapefiles
for (shape_name in shapes) {
if (shape_name %in% names(shapefile_list)) {
shp <- shapefile_list[[shape_name]]
shape_list[[length(shape_list) + 1]] <- shp
efh_map <- efh_map %>%
addPolygons(data = shp,
fillColor = "red",
fillOpacity = 0.5,
color = "red",
weight = 1,
label = shape_name)
} else {
warning(paste("Missing shapefile:", shape_name))
}
}
# Show map
print(efh_map)
warnings()
getwd()
##upload habitat shapefiles by habitat zone and ecoregion
habitat_dir<-"C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat"
# List all habitat type folders (directories) in the current directory
habitattype_folders <- list.dirs(path = habitat_dir, full.names = TRUE, recursive = FALSE)
print(habitattype_folders)
# Define base output directory for saving all files
output_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/Maps_Output"
# Define directory for shapefiles inside the output directory
shp_dir <- file.path(output_dir, "Shapefiles")
# Create the shapefiles directory if it doesn't exist
dir.create(shp_dir, showWarnings = FALSE)
# Optional: Also create an "HTML_Maps" directory for the map HTML/PNG files
maps_dir <- file.path(output_dir, "HTML_Maps")
dir.create(maps_dir, showWarnings = FALSE)
# Print paths to check if directories are created correctly
print(paste("Shapefiles will be saved to:", shp_dir))
print(paste("Maps (HTML/PNG) will be saved to:", maps_dir))
# Initialize an empty list to store all spatial files
shapefile_list <- list()
####### DO NOT NEED TO RUN SHAPEFILES NOW THAT .GPKG FILES ARE CREATED ######
########################START HERE TO HELP MEMORY ###################
gpkg_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat/Converted_GPKG"
# List all .gpkg files in the directory
gpkg_files <- list.files(gpkg_dir, pattern = "\\.gpkg$", full.names = TRUE)
View(gpkg_files)
print(gpkg_files)
# Initialize an empty list to store the shapefiles from the .gpkg files
shapefile_list <- list()
# Loop through the .gpkg files and read the layers
for (file in gpkg_files) {
# Get the available layers in the .gpkg file
layers <- st_layers(file)$name
# Loop through each layer and read it into the shapefile list
for (layer in layers) {
# Correct the naming convention to match "habitattype_habitatzone_ecoregion"
# Extract the correct file name (i.e., the first part of the layer name)
# assuming the layer name is not in the format you expect.
# For example, layer_name could be "wca_off_er1" or something else.
# Use only the part of the layer name that corresponds to your naming convention
layer_name_parts <- strsplit(layer, "_")[[1]]
correct_name <- paste(tolower(layer_name_parts[1]),
tolower(layer_name_parts[2]),
toupper(layer_name_parts[3]),
sep = "_")
# Store the shapefile in the list with the corrected name
shapefile_list[[correct_name]] <- st_read(file, layer = layer, quiet = TRUE)
}
}
# View the list of shapefiles with corrected names
View(shapefile_list)
gpkg_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat/Converted_GPKG"
# Create a summary table of key info
shapefile_summary <- lapply(names(shapefile_list), function(name) {
shp <- shapefile_list[[name]]
gpkg_path <- file.path(gpkg_dir, paste0(name, ".gpkg"))
list(
name = name,
crs = st_crs(shp)$epsg,
features = nrow(shp),
file_size_mb = if (file.exists(gpkg_path)) file.info(gpkg_path)$size / 1024^2 else NA,
geometry_type = unique(st_geometry_type(shp))
)
}) %>% bind_rows()
# View in Viewer pane
View(shapefile_summary)
#################### clean up files from polygon to multipolygon #################
# Initialize an empty list to store the shapefiles from the .gpkg files
shapefile_list <- list()
# Loop through the .gpkg files and read the layers
for (file in gpkg_files) {
# Print debug message to see the files being processed
message(paste("Processing file:", file))
# Get the available layers in the .gpkg file
layers <- st_layers(file)$name
if (length(layers) == 0) {
message(paste("No layers found in file:", file))
next
}
# Loop through each layer and read it into the shapefile list
for (layer in layers) {
# Read the shapefile into R
shp <- try(st_read(file, layer = layer, quiet = TRUE), silent = TRUE)
# Check if there was an error reading the shapefile
if (inherits(shp, "try-error")) {
message(paste("Error reading layer:", layer, "from file:", file))
next
}
# Correct the naming convention (ensure correct naming for each layer)
layer_name_parts <- strsplit(layer, "_")[[1]]
correct_name <- paste(tolower(layer_name_parts[1]),
tolower(layer_name_parts[2]),
toupper(layer_name_parts[3]),
sep = "_")
# Check geometry type and convert POLYGON to MULTIPOLYGON if needed
if (any(st_geometry_type(shp) == "POLYGON")) {
shp <- st_cast(shp, "MULTIPOLYGON")
message(paste("Converted POLYGON to MULTIPOLYGON in layer:", layer))
}
# Store the shapefile in the list with the corrected name
shapefile_list[[correct_name]] <- shp
}
}
# Check the result after processing
if (length(shapefile_list) == 0) {
message("No shapefiles were successfully read or processed.")
} else {
# View the list of shapefiles with corrected names
View(shapefile_list)
}
# View the summary in the Viewer pane
View(shapefile_summary)
# View the summary in the Viewer pane
View(shapefile_summary)
# Extract the layers
em_layer <- shapefile_list[["em_est_er1"]]
mangrove_layer <- shapefile_list[["mangrove_est_er2"]]
leaflet() %>%
addTiles() %>%
addPolygons(data = em_layer,
fillColor = "red",
fillOpacity = 0.5,
color = "red",
weight = 1,
group = "em est er1",
label = ~paste("EM")) %>%
addPolygons(data = mangrove_layer,
fillColor = "green",
fillOpacity = 0.5,
color = "green",
weight = 1,
group = "Mangrove EST ER2",
label = ~paste("Mangrove")) %>%
addLayersControl(
overlayGroups = c("WCA OFF ER1", "Mangrove EST ER2"),
options = layersControlOptions(collapsed = FALSE)
)
##check structure
str(em_layer)
str(mangrove_layer)
##upload habitat shapefiles by habitat zone and ecoregion
habitat_dir<-"C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/2025 GIS Clipped Habitat"
# List all habitat type folders (directories) in the current directory
habitattype_folders <- list.dirs(path = habitat_dir, full.names = TRUE, recursive = FALSE)
print(habitattype_folders)
# Define base output directory for saving all files
output_dir <- "C:/Users/Sarah/OneDrive - GOM/Desktop/Generic AM 5 GIS files/Maps_Output"
# Define directory for shapefiles inside the output directory
shp_dir <- file.path(output_dir, "Shapefiles")
# Create the shapefiles directory if it doesn't exist
dir.create(shp_dir, showWarnings = FALSE)
# Optional: Also create an "HTML_Maps" directory for the map HTML/PNG files
maps_dir <- file.path(output_dir, "HTML_Maps")
dir.create(maps_dir, showWarnings = FALSE)
# Print paths to check if directories are created correctly
print(paste("Shapefiles will be saved to:", shp_dir))
print(paste("Maps (HTML/PNG) will be saved to:", maps_dir))
# Initialize an empty list to store all spatial files
shapefile_list <- list()
# Loop through each habitat type folder
for (folder in habitattype_folders) {
# List all .shp and .gpkg files in the folder (and subfolders)
shp_files <- list.files(path = folder, pattern = "\\.shp$", full.names = TRUE, recursive = TRUE)
gpkg_files <- list.files(path = folder, pattern = "\\.gpkg$", full.names = TRUE, recursive = TRUE)
# Read all shapefiles (.shp)
for (file in shp_files) {
shapefile_name <- gsub(".*/(.*)\\.shp", "\\1", file)
shapefile_list[[shapefile_name]] <- st_read(file, quiet = TRUE)
}
# Read all geopackages (.gpkg), extracting layer names and reading them
for (file in gpkg_files) {
layers <- st_layers(file)$name
for (layer in layers) {
layer_name <- paste0(tools::file_path_sans_ext(basename(file)), "_", layer)
shapefile_list[[layer_name]] <- st_read(file, layer = layer, quiet = TRUE)
}
}
}
# Clean non-geometry columns to numeric where possible
clean_shapefiles <- function(shapefile) {
shapefile[] <- lapply(shapefile, function(col) {
if (!inherits(col, "sfc")) {
return(suppressWarnings(as.numeric(col)))  # may coerce characters
}
return(col)
})
return(shapefile)
}
# Clean non-geometry columns to numeric where possible
clean_shapefiles <- function(shapefile) {
shapefile[] <- lapply(shapefile, function(col) {
if (!inherits(col, "sfc")) {
return(suppressWarnings(as.numeric(col)))  # may coerce characters
}
return(col)
})
return(shapefile)
}
shapefile_list <- lapply(shapefile_list, clean_shapefiles)
# Reproject all to WGS84 (EPSG:4326)
shapefile_list <- lapply(shapefile_list, function(shp) st_transform(shp, crs = 4326))
# Simplify if needed based on feature count
# Several shapefiles >5000
simplify_threshold <- 5000
get_keep_ratio <- function(n_features) {
if (n_features > 50000) return(0.005)
if (n_features > 20000) return(0.01)
if (n_features > 10000) return(0.02)
return(0.03)
}
# Apply simplification and preserve names
shapefile_list <- setNames(lapply(names(shapefile_list), function(name) {
shp <- shapefile_list[[name]]
if (!is.null(shp)) {
n_feat <- nrow(shp)
if (n_feat > simplify_threshold) {
kr <- get_keep_ratio(n_feat)
message(sprintf("Simplifying %s (%d features) with keep_ratio %.3f", name, n_feat, kr))
shp <- rmapshaper::ms_simplify(shp, keep = kr, keep_shapes = TRUE)
}
}
return(shp)
}), tolower(names(shapefile_list)))  # also convert names to lowercase here
